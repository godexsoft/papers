<pre class='metadata'>
Title: The unexpected in std::expected
Shortname: D9999
Revision: 0
Audience: LWG
Status: D
Group: WG21
URL: http://wg21.link/D9999
!Source: <a href="https://github.com/godexsoft/papers/blob/master/source/UnexpectedInExpected.bs">github.com/godexsoft/papers/blob/master/source/UnexpectedInExpected.bs</a>
Editor: Alex Kremer, Ripple, akremer@ripple.com
Editor: Ayaz Salikhov, Ripple, asalikhov@ripple.com
Date: 2025-06-29
Markup Shorthands: markdown yes
Toggle Diffs: no
No abstract: true
</pre>

<style>
table, th, td { border: 2px solid grey; }
</style>


Abstract {#abstract}
========

We propose to add a `has_error()` member function to `std::expected` to complement the existing `has_value()` functionality.


Motivation {#motivation}
==========

Today, `std::expected` provides a `has_value()` member function that can be used to check whether the instance holds a value or an error. There is also an implicit conversion operator to bool that can be used for the same purpose. These two existing mechanisms follow several other facilities in the language including `std::optional`.

<b>TODO:</b> we also should say that just because `std::optional` only has `has_value` does not mean `std::expected` also must suffer. They are not the same monad.

<table>
<thead><tr><td>Without this proposal</td><td>With this proposal</td></tr></thead>
<tr>
    <td>
        ```cpp
        std::expected<void, std::string> result = process();
        if (!result.has_value()) {
            return Error(result.error());
        }
        ```
    </td>
    <td>
        ```cpp
        std::expected<void, std::string> result = process();
        if (result.has_error()) {
            return Error(result.error());
        }
        ```
    </td>
</tr>
<tr>
    <td>
        ```cpp
        std::expected<int, std::string> result = process();
        if (result.has_value()) {
            return handle(result.value());
        }
        ```
    </td>
    <td>
        ```cpp
        std::expected<int, std::string> result = process();
        if (not result.has_error()) {
            return handle(result.value());
        }
        ```
    </td>
</tr>
<tr>
    <td>
        ```cpp
        std::expected<int, std::string> result = process();
        ASSERT_TRUE(!result.has_value());
        EXPECT_EQ(result.error(), "myError");
        ```
    </td>
    <td>
        ```cpp
        std::expected<int, std::string> result = process();
        ASSERT_TRUE(result.has_error());
        EXPECT_EQ(result.error(), "myError");
        ```
    </td>
</tr>
</table>

<b>TODO:</b> more interesting use cases and motivation needed

Impact on the standard {#impact}
----------------------

This change is entirely based on library extensions and does not require any language features beyond what is available in C++ 23.


Wording {#word}
=======

<b>TODO:</b> This is the fun part. We need to add diffs to current draft of the standard here


References {#ref}
==========

* <a href="https://wg21.link/P0032r3">P0032</a> Homogeneous interface for variant, any and optional
* <a href="https://wg21.link/P0323r12">P0323</a> std::expected

<b>TODO:</b> more references may be needed
